"""
–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤, –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ç–æ—Ä—ã—Ö –±–æ—Ç –¥–µ–ª–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã
"""

class PredictionFactors:
    """–§–∞–∫—Ç–æ—Ä—ã, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑—ã —Ñ—É—Ç–±–æ–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞"""
    
    def __init__(self):
        self.factors = {
            # 1. –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–ï –î–ê–ù–ù–´–ï (40% –≤–ª–∏—è–Ω–∏—è)
            "historical_data": {
                "head_to_head": "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ª–∏—á–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á –∫–æ–º–∞–Ω–¥",
                "home_advantage": "–î–æ–º–∞—à–Ω–µ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ (–≤ —Å—Ä–µ–¥–Ω–µ–º 60% –ø–æ–±–µ–¥ –¥–æ–º–∞)",
                "season_form": "–§–æ—Ä–º–∞ –∫–æ–º–∞–Ω–¥—ã –≤ —Ç–µ–∫—É—â–µ–º —Å–µ–∑–æ–Ω–µ",
                "recent_matches": "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5-10 –º–∞—Ç—á–µ–π"
            },
            
            # 2. –°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò (30% –≤–ª–∏—è–Ω–∏—è)
            "statistical_indicators": {
                "goals_scored_avg": "–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ–≤ –∑–∞ –º–∞—Ç—á",
                "goals_conceded_avg": "–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –≥–æ–ª–æ–≤",
                "possession_percentage": "–ü—Ä–æ—Ü–µ–Ω—Ç –≤–ª–∞–¥–µ–Ω–∏—è –º—è—á–æ–º",
                "shots_on_target": "–£–¥–∞—Ä—ã –≤ —Å—Ç–≤–æ—Ä –≤–æ—Ä–æ—Ç",
                "pass_accuracy": "–¢–æ—á–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á",
                "defensive_strength": "–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∑–∞—â–∏—Ç—ã"
            },
            
            # 3. –§–û–†–ú–ê –ö–û–ú–ê–ù–î (20% –≤–ª–∏—è–Ω–∏—è)
            "team_form": {
                "win_streak": "–°–µ—Ä–∏—è –ø–æ–±–µ–¥/–ø–æ—Ä–∞–∂–µ–Ω–∏–π",
                "goals_in_form": "–ì–æ–ª—ã –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∞—Ç—á–∞—Ö",
                "clean_sheets": "–°—É—Ö–∏–µ –º–∞—Ç—á–∏",
                "injury_impact": "–í–ª–∏—è–Ω–∏–µ —Ç—Ä–∞–≤–º –∫–ª—é—á–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤",
                "suspensions": "–î–∏—Å–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–≥—Ä–æ–∫–æ–≤"
            },
            
            # 4. –í–ù–ï–®–ù–ò–ï –§–ê–ö–¢–û–†–´ (10% –≤–ª–∏—è–Ω–∏—è)
            "external_factors": {
                "weather_conditions": "–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è",
                "stadium_factor": "–§–∞–∫—Ç–æ—Ä —Å—Ç–∞–¥–∏–æ–Ω–∞",
                "crowd_support": "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ–ª–µ–ª—å—â–∏–∫–æ–≤",
                "fixture_congestion": "–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—è",
                "motivation_level": "–ú–æ—Ç–∏–≤–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥"
            }
        }
    
    def get_prediction_algorithm(self):
        """–ê–ª–≥–æ—Ä–∏—Ç–º –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –±–æ—Ç–∞"""
        return {
            "step_1": "–°–±–æ—Ä –∏ –∞–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π",
            "step_2": "–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∫–æ–º–∞–Ω–¥",
            "step_3": "–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Ñ–æ—Ä–º—ã –∫–æ–º–∞–Ω–¥",
            "step_4": "–£—á–µ—Ç –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤",
            "step_5": "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è",
            "step_6": "–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –∏—Å—Ö–æ–¥–æ–≤",
            "step_7": "–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞"
        }
    
    def get_feature_importance(self):
        """–í–∞–∂–Ω–æ—Å—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞"""
        return {
            "home_advantage": 0.15,  # 15% –≤–ª–∏—è–Ω–∏—è
            "recent_form": 0.20,     # 20% –≤–ª–∏—è–Ω–∏—è
            "head_to_head": 0.10,    # 10% –≤–ª–∏—è–Ω–∏—è
            "goals_statistics": 0.25, # 25% –≤–ª–∏—è–Ω–∏—è
            "team_strength": 0.15,   # 15% –≤–ª–∏—è–Ω–∏—è
            "external_factors": 0.10, # 10% –≤–ª–∏—è–Ω–∏—è
            "random_factor": 0.05    # 5% —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
        }

# –ü—Ä–∏–º–µ—Ä—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç
class DataExamples:
    """–ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö, –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ç–æ—Ä—ã—Ö –±–æ—Ç –¥–µ–ª–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã"""
    
    @staticmethod
    def get_team_analysis_example():
        """–ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–∞–Ω–¥—ã"""
        return {
            "team": "Arsenal",
            "recent_form": {
                "last_5_matches": ["W", "W", "D", "W", "L"],
                "goals_scored": 8,
                "goals_conceded": 3,
                "clean_sheets": 3
            },
            "home_record": {
                "matches_played": 10,
                "wins": 7,
                "draws": 2,
                "losses": 1,
                "goals_scored": 18,
                "goals_conceded": 6
            },
            "head_to_head": {
                "opponent": "Chelsea",
                "last_5_meetings": ["L", "W", "D", "W", "L"],
                "home_advantage": True
            }
        }
    
    @staticmethod
    def get_prediction_calculation():
        """–ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
        return {
            "home_team": "Arsenal",
            "away_team": "Chelsea",
            "factors_analysis": {
                "home_advantage": 0.15,  # +15% –∫ –ø–æ–±–µ–¥–µ –¥–æ–º–∞
                "recent_form_arsenal": 0.20,  # +20% (—Ö–æ—Ä–æ—à–∞—è —Ñ–æ—Ä–º–∞)
                "recent_form_chelsea": -0.10,  # -10% (–ø–ª–æ—Ö–∞—è —Ñ–æ—Ä–º–∞)
                "head_to_head": 0.05,  # +5% (–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ)
                "goals_statistics": 0.10,  # +10% (–±–æ–ª—å—à–µ –≥–æ–ª–æ–≤ –∑–∞–±–∏–≤–∞—é—Ç)
                "injuries": -0.05,  # -5% (—Ç—Ä–∞–≤–º—ã –∫–ª—é—á–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤)
            },
            "final_probabilities": {
                "home_win": 0.55,  # 55% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–±–µ–¥—ã –¥–æ–º–∞
                "draw": 0.25,      # 25% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∏—á—å–∏
                "away_win": 0.20   # 20% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–±–µ–¥—ã –≤ –≥–æ—Å—Ç—è—Ö
            },
            "confidence": 0.75,  # 75% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ
            "recommendation": "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å—Ç–∞–≤–∫–∞ –Ω–∞ –ø–æ–±–µ–¥—É Arsenal"
        }

# –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
class PredictionModel:
    """–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"""
    
    def __init__(self):
        self.weights = {
            'home_advantage': 0.15,
            'form_difference': 0.25,
            'goals_difference': 0.20,
            'head_to_head': 0.10,
            'strength_rating': 0.20,
            'external_factors': 0.10
        }
    
    def calculate_prediction(self, match_data):
        """–†–∞—Å—á–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞"""
        # –ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞
        home_advantage = 0.15  # –ë–∞–∑–æ–≤–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ
        form_factor = self._calculate_form_factor(match_data)
        goals_factor = self._calculate_goals_factor(match_data)
        h2h_factor = self._calculate_h2h_factor(match_data)
        
        # –ò—Ç–æ–≥–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–±–µ–¥—ã –¥–æ–º–∞
        home_win_probability = 0.33 + home_advantage + form_factor + goals_factor + h2h_factor
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
        total = home_win_probability + 0.25 + (1 - home_win_probability - 0.25)
        
        return {
            'home_win': home_win_probability / total,
            'draw': 0.25 / total,
            'away_win': (1 - home_win_probability - 0.25) / total
        }
    
    def _calculate_form_factor(self, match_data):
        """–†–∞—Å—á–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∞ —Ñ–æ—Ä–º—ã –∫–æ–º–∞–Ω–¥"""
        home_form = match_data['home_team']['recent_form_score']
        away_form = match_data['away_team']['recent_form_score']
        return (home_form - away_form) * 0.1
    
    def _calculate_goals_factor(self, match_data):
        """–†–∞—Å—á–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∞ –≥–æ–ª–æ–≤"""
        home_goals_avg = match_data['home_team']['goals_scored_avg']
        away_goals_avg = match_data['away_team']['goals_scored_avg']
        home_conceded_avg = match_data['home_team']['goals_conceded_avg']
        away_conceded_avg = match_data['away_team']['goals_conceded_avg']
        
        attack_difference = (home_goals_avg - away_goals_avg) * 0.05
        defense_difference = (away_conceded_avg - home_conceded_avg) * 0.05
        
        return attack_difference + defense_difference
    
    def _calculate_h2h_factor(self, match_data):
        """–†–∞—Å—á–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∞ –ª–∏—á–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á"""
        h2h_record = match_data['head_to_head']
        home_wins = h2h_record['home_wins']
        total_matches = h2h_record['total_matches']
        
        if total_matches > 0:
            return (home_wins / total_matches - 0.5) * 0.1
        return 0

if __name__ == "__main__":
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
    factors = PredictionFactors()
    print("üîç –§–∞–∫—Ç–æ—Ä—ã, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑—ã –±–æ—Ç–∞:")
    
    for category, items in factors.factors.items():
        print(f"\nüìä {category.upper()}:")
        for key, description in items.items():
            print(f"   ‚Ä¢ {key}: {description}")
    
    print("\nüßÆ –ê–ª–≥–æ—Ä–∏—Ç–º –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π:")
    for step, description in factors.get_prediction_algorithm().items():
        print(f"   {step}: {description}")
    
    print("\n‚öñÔ∏è –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
    for feature, importance in factors.get_feature_importance().items():
        print(f"   {feature}: {importance*100:.1f}%")
