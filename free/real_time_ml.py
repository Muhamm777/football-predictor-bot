"""
–°–∏—Å—Ç–µ–º–∞ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
"""

import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import cross_val_score
from sklearn.metrics import accuracy_score, precision_score, recall_score
import joblib
import schedule
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import threading
import queue
import logging

class RealTimeMLSystem:
    """–°–∏—Å—Ç–µ–º–∞ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    
    def __init__(self):
        self.models = {}
        self.model_performance = {}
        self.data_queue = queue.Queue()
        self.is_running = False
        self.update_interval = 300  # 5 –º–∏–Ω—É—Ç
        self.retrain_threshold = 0.05  # 5% —Å–Ω–∏–∂–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(level=logging.INFO)
        self.logger = logging.getLogger(__name__)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
        self._initialize_models()
    
    def _initialize_models(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π"""
        self.models = {
            'primary': GradientBoostingClassifier(
                n_estimators=200,
                learning_rate=0.05,
                max_depth=8,
                random_state=42
            ),
            'secondary': RandomForestClassifier(
                n_estimators=300,
                max_depth=10,
                random_state=42
            ),
            'backup': LogisticRegression(
                max_iter=1000,
                random_state=42
            )
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        for model_name in self.models.keys():
            self.model_performance[model_name] = {
                'accuracy': 0.0,
                'last_update': datetime.now(),
                'predictions_count': 0,
                'correct_predictions': 0
            }
    
    def add_new_data(self, match_data: Dict):
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ—á–µ—Ä–µ–¥—å"""
        match_data['timestamp'] = datetime.now()
        self.data_queue.put(match_data)
        self.logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {match_data.get('match_id', 'unknown')}")
    
    def start_real_time_system(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        self.is_running = True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        data_thread = threading.Thread(target=self._process_data_queue)
        data_thread.daemon = True
        data_thread.start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        monitor_thread = threading.Thread(target=self._monitor_performance)
        monitor_thread.daemon = True
        monitor_thread.start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ
        retrain_thread = threading.Thread(target=self._auto_retrain_scheduler)
        retrain_thread.daemon = True
        retrain_thread.start()
        
        self.logger.info("üöÄ –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—â–µ–Ω–∞")
    
    def stop_real_time_system(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        self.is_running = False
        self.logger.info("‚èπÔ∏è –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    def _process_data_queue(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –¥–∞–Ω–Ω—ã—Ö"""
        while self.is_running:
            try:
                if not self.data_queue.empty():
                    match_data = self.data_queue.get(timeout=1)
                    self._process_match_data(match_data)
                else:
                    time.sleep(1)
            except queue.Empty:
                continue
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def _process_match_data(self, match_data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
            features = self._extract_features(match_data)
            
            # –î–µ–ª–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑
            prediction = self._make_prediction(features)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑
            self._save_prediction(match_data, prediction)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._update_prediction_stats(prediction)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Ç—á–∞: {e}")
    
    def _extract_features(self, match_data: Dict) -> np.ndarray:
        """–ò–∑–≤–ª–µ—á—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞"""
        # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        features = [
            match_data.get('home_team_form', 0.5),
            match_data.get('away_team_form', 0.5),
            match_data.get('home_goals_avg', 1.5),
            match_data.get('away_goals_avg', 1.5),
            match_data.get('home_conceded_avg', 1.2),
            match_data.get('away_conceded_avg', 1.2),
            match_data.get('home_advantage', 0.15),
            match_data.get('head_to_head_home', 0.5),
            match_data.get('weather_factor', 0.0),
            match_data.get('injury_factor', 0.0)
        ]
        
        return np.array(features).reshape(1, -1)
    
    def _make_prediction(self, features: np.ndarray) -> Dict:
        """–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –∏—Å–ø–æ–ª—å–∑—É—è –ª—É—á—à—É—é –º–æ–¥–µ–ª—å"""
        best_model = self._get_best_model()
        
        if best_model is None:
            return {'error': '–ù–µ—Ç –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π'}
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
            probabilities = best_model.predict_proba(features)[0]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result_classes = ['HOME_WIN', 'DRAW', 'AWAY_WIN']
            predicted_class = result_classes[np.argmax(probabilities)]
            confidence = np.max(probabilities)
            
            return {
                'predicted_result': predicted_class,
                'probabilities': {
                    'HOME_WIN': probabilities[0],
                    'DRAW': probabilities[1],
                    'AWAY_WIN': probabilities[2]
                },
                'confidence': confidence,
                'model_used': best_model.__class__.__name__,
                'timestamp': datetime.now()
            }
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return {'error': str(e)}
    
    def _get_best_model(self):
        """–ü–æ–ª—É—á–∏—Ç—å –ª—É—á—à—É—é –º–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if not self.model_performance:
            return None
        
        best_model_name = max(
            self.model_performance.keys(),
            key=lambda x: self.model_performance[x]['accuracy']
        )
        
        return self.models.get(best_model_name)
    
    def _save_prediction(self, match_data: Dict, prediction: Dict):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"""
        prediction_record = {
            'match_id': match_data.get('match_id'),
            'home_team': match_data.get('home_team'),
            'away_team': match_data.get('away_team'),
            'prediction': prediction,
            'timestamp': datetime.now()
        }
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.logger.info(f"–ü—Ä–æ–≥–Ω–æ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {prediction_record['match_id']}")
    
    def _update_prediction_stats(self, prediction: Dict):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"""
        if 'error' in prediction:
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        for model_name in self.models.keys():
            self.model_performance[model_name]['predictions_count'] += 1
    
    def _monitor_performance(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π"""
        while self.is_running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
                time.sleep(600)
                
                for model_name, performance in self.model_performance.items():
                    if performance['predictions_count'] > 0:
                        accuracy = performance['correct_predictions'] / performance['predictions_count']
                        performance['accuracy'] = accuracy
                        
                        self.logger.info(f"–ú–æ–¥–µ–ª—å {model_name}: —Ç–æ—á–Ω–æ—Å—Ç—å {accuracy:.3f}")
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    
    def _auto_retrain_scheduler(self):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è"""
        while self.is_running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
                time.sleep(21600)
                
                if self._should_retrain():
                    self.logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ")
                    self._retrain_models()
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    
    def _should_retrain(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–æ–±—É—á–∞—Ç—å –º–æ–¥–µ–ª–∏"""
        for model_name, performance in self.model_performance.items():
            if performance['accuracy'] < 0.7:  # –ü–æ—Ä–æ–≥ —Ç–æ—á–Ω–æ—Å—Ç–∏
                return True
        
        return False
    
    def _retrain_models(self):
        """–ü–µ—Ä–µ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            new_data = self._load_training_data()
            
            if new_data is None or len(new_data) < 100:
                self.logger.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è")
                return
            
            # –ü–µ—Ä–µ–æ–±—É—á–∞–µ–º –∫–∞–∂–¥—É—é –º–æ–¥–µ–ª—å
            for model_name, model in self.models.items():
                X, y = self._prepare_training_data(new_data)
                
                # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
                model.fit(X, y)
                
                # –û—Ü–µ–Ω–∏–≤–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                cv_scores = cross_val_score(model, X, y, cv=5)
                accuracy = cv_scores.mean()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                self.model_performance[model_name]['accuracy'] = accuracy
                self.model_performance[model_name]['last_update'] = datetime.now()
                
                self.logger.info(f"–ú–æ–¥–µ–ª—å {model_name} –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∞. –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.3f}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª–∏
            self._save_models()
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è: {e}")
    
    def _load_training_data(self) -> Optional[pd.DataFrame]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        np.random.seed(42)
        n_samples = 1000
        
        data = {
            'home_team_form': np.random.uniform(0.2, 0.8, n_samples),
            'away_team_form': np.random.uniform(0.2, 0.8, n_samples),
            'home_goals_avg': np.random.uniform(1, 3, n_samples),
            'away_goals_avg': np.random.uniform(1, 3, n_samples),
            'home_conceded_avg': np.random.uniform(0.5, 2, n_samples),
            'away_conceded_avg': np.random.uniform(0.5, 2, n_samples),
            'home_advantage': np.random.uniform(0.1, 0.2, n_samples),
            'head_to_head_home': np.random.uniform(0.3, 0.7, n_samples),
            'weather_factor': np.random.uniform(-0.1, 0.1, n_samples),
            'injury_factor': np.random.uniform(-0.2, 0.1, n_samples)
        }
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —É—á–µ—Ç–æ–º –¥–æ–º–∞—à–Ω–µ–≥–æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
        results = []
        for i in range(n_samples):
            home_advantage = data['home_advantage'][i]
            form_diff = data['home_team_form'][i] - data['away_team_form'][i]
            
            home_win_prob = 0.33 + home_advantage + form_diff * 0.1
            draw_prob = 0.25
            away_win_prob = 1 - home_win_prob - draw_prob
            
            results.append(np.random.choice(
                ['HOME_WIN', 'DRAW', 'AWAY_WIN'],
                p=[home_win_prob, draw_prob, away_win_prob]
            ))
        
        data['result'] = results
        return pd.DataFrame(data)
    
    def _prepare_training_data(self, df: pd.DataFrame) -> tuple:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        feature_columns = [
            'home_team_form', 'away_team_form', 'home_goals_avg',
            'away_goals_avg', 'home_conceded_avg', 'away_conceded_avg',
            'home_advantage', 'head_to_head_home', 'weather_factor', 'injury_factor'
        ]
        
        X = df[feature_columns].values
        y = df['result'].values
        
        return X, y
    
    def _save_models(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–æ–¥–µ–ª–∏"""
        for model_name, model in self.models.items():
            filename = f"models/{model_name}_model.pkl"
            joblib.dump(model, filename)
            self.logger.info(f"–ú–æ–¥–µ–ª—å {model_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {filename}")
    
    def get_system_status(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        return {
            'is_running': self.is_running,
            'queue_size': self.data_queue.qsize(),
            'model_performance': self.model_performance,
            'last_update': datetime.now().isoformat()
        }
    
    def update_model_feedback(self, match_id: str, actual_result: str, predicted_result: str):
        """–û–±–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
        is_correct = actual_result == predicted_result
        
        for model_name in self.models.keys():
            if is_correct:
                self.model_performance[model_name]['correct_predictions'] += 1
        
        self.logger.info(f"–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –¥–ª—è –º–∞—Ç—á–∞ {match_id}: {'–ø—Ä–∞–≤–∏–ª—å–Ω–æ' if is_correct else '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ'}")

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    rt_system = RealTimeMLSystem()
    
    print("üöÄ –°–ò–°–¢–ï–ú–ê –ú–ê–®–ò–ù–ù–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É
    rt_system.start_real_time_system()
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    print("\nüìä –°–∏–º—É–ª—è—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...")
    
    for i in range(5):
        match_data = {
            'match_id': f'match_{i+1}',
            'home_team': 'Arsenal',
            'away_team': 'Chelsea',
            'home_team_form': np.random.uniform(0.4, 0.8),
            'away_team_form': np.random.uniform(0.4, 0.8),
            'home_goals_avg': np.random.uniform(1.2, 2.5),
            'away_goals_avg': np.random.uniform(1.2, 2.5),
            'home_conceded_avg': np.random.uniform(0.8, 1.8),
            'away_conceded_avg': np.random.uniform(0.8, 1.8),
            'home_advantage': 0.15,
            'head_to_head_home': np.random.uniform(0.3, 0.7),
            'weather_factor': np.random.uniform(-0.1, 0.1),
            'injury_factor': np.random.uniform(-0.2, 0.1)
        }
        
        rt_system.add_new_data(match_data)
        time.sleep(1)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    time.sleep(2)
    status = rt_system.get_system_status()
    
    print(f"\nüìà –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´:")
    print(f"–ó–∞–ø—É—â–µ–Ω–∞: {status['is_running']}")
    print(f"–†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏: {status['queue_size']}")
    print(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {status['last_update']}")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É
    time.sleep(5)
    rt_system.stop_real_time_system()
    
    print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
